{
	"info": {
		"_postman_id": "515fbf06-4c3e-4116-97e9-9bcf2bbbdcd8",
		"name": "My collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Задание 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Задание 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос\r",
							"// Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let resp_f = pm.response.json()\r",
							"console.log(resp_f.name)\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let resp_name = resp_f.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Jane\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = resp_f.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"26\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = resp_f.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(80000);\r",
							"});\r",
							"// Спарсить request\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"// Проверить,  что age в ответе равно age s reques (age забрать из request.)\r",
							"let req_age = req_f.age\r",
							"console.log(req_age + typeof req_age)\r",
							"pm.test(\"Check age\", function () {\r",
							"        pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"// Проверить,  что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"console.log(req_salary + typeof req_salary)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response.\r",
							"let resp_family = resp_f.family\r",
							"console.log(resp_family)\r",
							" // Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							" let resp_salary_1_5_years = resp_family.u_salary_1_5_year\r",
							" console.log(resp_salary_1_5_years)\r",
							"pm.test(\"Check salary 1_5_years \", function () {\r",
							"    pm.expect(req_salary*4).to.eql(resp_salary_1_5_years);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Jane",
							"type": "default"
						},
						{
							"key": "age",
							"value": "26",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "80000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Задание 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос\r",
							"// Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let resp_f = pm.response.json()\r",
							"console.log(resp_f)\r",
							"// Спарсить request\r",
							"let req_f = pm.request.url.query.toObject()\r",
							"console.log(req_f)\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name\r",
							"console.log(req_name)\r",
							"let resp_name = resp_f.name\r",
							"console.log(resp_name)\r",
							"pm.test(\"Check name\", function () {\r",
							"       pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = +req_f.age\r",
							"console.log(req_age + typeof req_age)\r",
							"let resp_age = +resp_f.age\r",
							"console.log(resp_age + typeof resp_age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"console.log(req_salary)\r",
							"let resp_salary = resp_f.salary\r",
							"console.log(resp_salary)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response.\r",
							"let resp_family = resp_f.family\r",
							"console.log(resp_family)\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"let resp_dog = resp_family.pets.dog\r",
							"console.log(resp_dog)\r",
							"pm.test(\"Check property name\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"name\");\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check property age\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"age\");\r",
							"});\r",
							"//  Проверить, что параметр name имеет значение Luky\r",
							"let dog_name = resp_family.pets.dog.name\r",
							"console.log(dog_name)\r",
							"pm.test(\"Check name Luky\", function () {\r",
							"    pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = resp_family.pets.dog.age\r",
							"pm.test(\"Check age 4\", function () {\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Jane&age=26&salary=80000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Jane"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Задание 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос\r",
							"// Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let resp_f = pm.response.json()\r",
							"console.log(resp_f)\r",
							"// Спарсить request\r",
							"let req_f = pm.request.url.query.toObject()\r",
							"console.log(req_f)\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name\r",
							"let resp_name = resp_f.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = + req_f.age\r",
							"console.log(req_age + typeof req_age)\r",
							"let resp_age = resp_f.age\r",
							"console.log(resp_age + typeof resp_age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req_f.salary)\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(resp_f.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_f.salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_f.salary[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_f.salary[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let resp_0_salary = resp_f.salary[0]\r",
							"let req_salary = +req_f.salary\r",
							"pm.test(\"Check salary 0 \", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_0_salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_1_salary = +resp_f.salary[1]\r",
							"pm.test(\"Check salary 1 \", function () {\r",
							"    pm.expect( req_salary*2).to.eql(resp_1_salary);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_2_salary = +resp_f.salary[2]\r",
							"pm.test(\"Check salary 2 \", function () {\r",
							"    pm.expect( req_salary*3).to.eql(resp_2_salary);\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_f.name);\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_f.age);\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_f.salary[0]);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (key in resp_f.salary) {\r",
							"    console.log(key, resp_f.salary[key]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Jane&age=26&salary=80000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Jane"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Задание 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//Отправить запрос\r",
							"// Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let resp_f = pm.response.json()\r",
							"console.log(resp_f)\r",
							"// Спарсить request\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check property start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check property qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check property person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"console.log(req_salary)\r",
							"let resp_qa_salary = resp_f.start_qa_salary\r",
							"pm.test(\"Check start qa salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_qa_salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_after_6_months = resp_f.qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(req_salary*2).to.eql(qa_salary_after_6_months);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months = resp_f.qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(req_salary*2.7).to.eql(qa_salary_after_12_months);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let qa_salary = resp_f[\"qa_salary_after_1.5_year\"]\r",
							"console.log(qa_salary)\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(req_salary*3.3).to.eql(qa_salary);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary1 = resp_f[\"qa_salary_after_3.5_years\"]\r",
							"console.log(qa_salary1)\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(req_salary*3.8).to.eql(qa_salary1);\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let person = resp_f.person.u_name[1]\r",
							"console.log(person)\r",
							"pm.test(\"Check person_u_name_salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(person);\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let person_age = resp_f.person.u_age\r",
							"pm.test(\"Check person_age\", function () {\r",
							"    pm.expect(+req_f.age).to.eql(person_age);\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let person_u_salary_5_years = resp_f.person.u_salary_5_years\r",
							"pm.test(\"Check u_salary_5_years\", function () {\r",
							"    pm.expect(req_f.salary*4.2).to.eql(person_u_salary_5_years);\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in resp_f.person) {\r",
							"    console.log(key, resp_f.person[key]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
